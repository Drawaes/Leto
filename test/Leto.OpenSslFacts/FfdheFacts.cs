using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO.Pipelines;
using System.Text;
using System.Threading.Tasks;
using Leto.KeyExchanges;
using Leto.OpenSsl11.Internal;
using Xunit;

namespace Leto.OpenSslFacts
{
    public class FfdheFacts
    {
        [Fact]
        public void TouchStatic()
        {
            //Simple ensure that the static load works
            Assert.Equal(256, FfdheRfc7919.P2048.Length);
            Assert.Equal(256, FfdheRfc7919.Q2048.Length);
            Assert.Equal(384, FfdheRfc7919.P3072.Length);
            Assert.Equal(384, FfdheRfc7919.Q3072.Length);
            Assert.Equal(512, FfdheRfc7919.P4096.Length);
            Assert.Equal(512, FfdheRfc7919.Q4096.Length);
            Assert.Equal(768, FfdheRfc7919.P6144.Length);
            Assert.Equal(768, FfdheRfc7919.Q6144.Length);
            Assert.Equal(1024, FfdheRfc7919.P8192.Length);
            Assert.Equal(1024, FfdheRfc7919.Q8192.Length);
        }

        [Fact]
        public async Task Ffde4096KnownDerivedValue()
        {
            var privKeyHex = "73-DD-53-6D-26-6F-F5-33-5B-11-E1-91-F5-D0-C8-12-B9-94-4C-92-25-90-D2-22-66-75-6A-34-E4-32-E8-07-0C-A4-9A-BA-73-14-8E-B6-57-CC-54-D0-F9-DA-83-65-FF-F6-99-CF-CB-32-6E-E6-5D-85-32-B6-33-88-E9-56-7D-EC-37-37-92-57-00-0D-68-55-CF-F0-67-A3-EF-CB-16-CB-7A-EA-12-51-7A-FE-AD-D7-5B-16-59-2E-B5-69-CD-8A-D2-CC-07-6E-0B-DF-B4-85-04-B5-D4-2D-90-B4-28-F7-A5-AF-86-C7-14-6E-64-9F-1C-C5-18-74-BE-B8-50-06-56-0A-B9-5E-21-5B-41-1E-2F-C2-AA-E1-71-83-FE-5A-E6-43-A2-2D-9E-94-17-47-0C-50-BA-23-17-41-46-C9-C5-18-E1-8B-FC-F1-51-CD-9D-19-4A-64-9A-EC-EC-D1-77-AE-59-99-20-7D-85-E4-83-96-40-08-C5-A1-1B-8E-9E-27-4F-F3-F3-50-4B-ED-3E-83-2B-7F-2A-6A-BB-63-58-FE-DA-65-EE-C2-6D-A8-35-AE-8D-AE-82-8B-91-B6-25-48-F2-88-87-D5-6D-BA-7A-4A-CC-0E-56-D7-EA-AB-00-C0-D7-C9-14-23-5B-1D-DF-60-8C-26-F3-D3-9F-FB-D9-A3-9D-D4-4A-1F-1A-96-B7-AF-51-C0-8C-62-86-AE-89-4D-FC-12-16-F0-EC-FF-09-9D-AC-2D-B5-12-1C-1A-58-8A-A5-D3-8F-B4-CA-3D-03-42-04-32-C8-CD-9B-88-7E-62-25-5E-1A-97-BD-50-6E-C4-D5-A8-C0-DF-9B-95-79-B5-45-B0-3F-A9-E2-D3-57-53-11-AA-BB-E0-C7-48-ED-95-B3-52-03-79-7B-F7-F1-C4-BA-A0-96-85-EE-E7-1A-55-7F-6A-DB-4F-B9-3A-95-5E-04-1A-B3-30-56-03-36-9D-23-C4-EA-AE-AB-01-28-01-C3-0E-6B-2B-E2-17-3A-99-58-BA-76-CB-71-D4-DA-3C-35-E5-AB-7E-E6-F8-5A-CB-A8-F6-E3-28-46-C6-2B-93-71-EA-9D-80-74-0B-A7-CC-E3-58-FF-D0-1B-8C-BC-90-AF-E1-7E-05-FE-CC-F0-F5-FA-AB-E1-24-7A-93-EC-12-87-50-41-DC-83-C1-74-38-24-ED-57-C6-26-B4-B1-8E-D8-64-85-C4-CA-C2-D3-EC-B0-AE-11-DB-5E-63-15-A5-62-45-F9-47-C8-A5-0C-FD-BC-E6-81-F8-9B-51-F8-A2-F9-BD-FE-53-EA-28-54-B7-38-79-27-81-B4-C8-A2-72-91-B9-0B-1B";
            var peerKeyHex = "C9-3B-8A-0F-75-30-77-B8-77-24-8E-8B-DB-9C-A8-FC-F3-74-A2-B7-B0-A0-AE-7B-92-A0-D5-E9-DA-B4-01-6E-FE-CD-4A-44-C5-31-AA-F6-AE-DF-12-30-E3-39-1F-05-2A-A1-E9-0F-2B-DE-BD-B0-A0-12-3D-E1-E4-E9-67-22-14-5B-BF-8C-23-3A-3E-55-70-48-CC-46-F1-85-74-2A-4B-AB-90-AA-65-BC-1D-BD-16-86-0B-FB-69-7E-00-FE-93-77-80-78-93-96-AA-6D-8D-A0-57-96-AC-BD-14-64-FC-53-CA-32-EC-79-49-D5-BF-FA-D4-A8-C6-5D-1A-5A-28-84-A3-9A-CA-9A-50-CC-A4-3B-EA-FF-B4-5D-2F-B9-B7-E0-7B-62-66-4E-9F-2A-7A-91-CC-25-99-7F-C2-75-0B-62-83-EA-7D-10-D7-22-3B-37-C8-A3-12-EC-C0-3F-76-44-79-4F-A9-2B-FE-64-9A-CC-58-30-AB-16-60-CD-40-8A-6F-7F-52-38-7E-33-5E-65-A6-94-08-67-46-B6-00-75-67-71-ED-79-BD-35-CB-7F-90-7E-21-83-C8-59-EF-5D-78-C7-4C-7A-B5-55-DC-7B-B6-5C-BA-BA-94-23-D4-4E-D6-CE-9B-7F-F0-65-05-7F-77-FA-79-3A-BE-8A-C0-F4-21-C5-10-87-19-18-C6-EE-01-56-B0-E1-64-20-80-93-F9-81-FA-6C-0C-E1-E5-E9-1B-98-95-19-14-DE-A0-59-CE-51-BD-8D-90-58-D2-3B-2D-6F-64-E3-1A-07-CF-55-47-F8-9E-CA-93-6C-AC-A6-2F-77-CF-DE-11-87-5B-14-3C-D6-72-30-DE-92-4A-C7-D1-02-D3-8D-3C-B2-88-89-0D-A2-A9-A0-FE-91-8B-C0-C9-31-D3-CC-99-A4-BC-16-E4-85-CC-FF-54-70-8A-25-19-CB-BC-C6-1C-CD-B2-75-96-95-72-D2-C8-C2-DD-DE-E7-DD-AF-A6-8B-87-59-73-7C-33-4A-9E-D9-82-8D-5B-D4-70-40-FE-42-96-89-59-9A-46-B9-47-89-4B-5E-EE-08-E0-A9-2A-A4-8B-45-66-B9-24-70-A4-B4-61-86-CA-65-1F-DB-7A-D5-23-7A-EF-91-D2-61-21-4F-43-70-ED-C4-05-D8-F1-A8-CA-9E-42-50-0F-48-99-4A-26-BC-0E-23-6C-6A-D2-86-E9-A6-B9-2C-B8-90-9A-14-F4-78-D7-32-5A-DF-D6-9C-27-36-14-76-25-03-FB-2E-A2-2C-04-D6-E5-86-83-67-12-8F-CD-7D-AD-30-27-DB-F3-0C-FF-0E-8B-4A-2F-EF-DB";
            var secretHex = "4C-2C-F2-F9-A6-88-37-C9-83-77-62-89-D5-E0-34-55-26-03-1F-EE-6F-97-F4-ED-A4-83-32-7A-E5-24-1C-CA-2D-A6-1C-E5-E8-92-4C-B5-1F-F8-53-0B-9A-95-7F-92-FA-B8-65-E7-03-82-FF-60-41-39-52-BB-F3-85-36-00-27-A2-1C-B6-B2-CF-5B-C8-1C-D0-30-02-C4-E6-48-2B-F3-C3-8C-DA-D7-D8-B6-1D-DD-D3-71-CB-7B-0F-A8-90-4C-DA-37-39-29-87-AB-9B-30-E7-EB-DD-C5-D4-C4-E0-ED-5D-B7-A4-A4-1D-C6-B1-8F-A5-D9-16-20-F6-5F-EE-64-FC-AB-96-D2-14-6C-96-32-4D-B1-C6-DA-7F-40-4A-D5-2D-3C-89-67-86-EE-69-B5-AB-1F-A7-DC-21-58-5B-DB-C5-E8-67-7F-4D-D3-01-50-46-61-AE-E7-69-CB-87-93-05-87-C8-E7-31-52-52-64-A6-D3-39-91-D9-84-69-95-AE-E1-38-6D-CA-B4-41-20-AC-BE-FD-D0-AE-D0-24-51-13-F4-CB-17-F5-8D-09-E2-D3-B3-ED-1A-2C-21-D4-17-1A-D1-D0-F9-71-E7-8F-28-7F-0B-F0-01-D3-11-2C-10-D9-1C-2F-6C-76-D0-A8-9C-20-AE-2E-82-6B-9E-E4-98-84-43-5F-26-D9-93-22-9E-25-38-35-61-C5-66-D3-16-02-49-17-EE-05-B0-71-89-BC-41-D3-54-8E-54-13-23-90-DA-62-BA-19-48-47-F1-3F-65-25-D9-F0-6F-D5-A8-4D-7D-9D-6B-E7-0A-4F-D6-DF-50-D1-1D-69-F3-5A-61-C9-EF-BE-79-8D-32-A2-17-C7-2E-19-18-08-5E-EE-E5-7A-F4-31-0E-44-67-A5-85-F9-A6-3A-92-DF-4F-EE-73-A4-F1-BB-4B-4A-42-AD-20-2C-3A-0E-D5-55-DD-5B-C3-35-C5-01-CE-1A-71-FA-8C-13-A3-E3-B0-C5-DF-E0-1B-E3-43-BF-C3-86-E8-B1-1D-9C-6A-1A-68-8A-1D-3F-37-3A-45-9C-0D-58-FF-3E-7C-2B-EE-D9-81-66-82-BE-8D-21-1A-6B-40-58-C6-E9-28-6D-8E-4C-BF-8B-64-B9-B9-C4-4F-4C-18-68-96-C6-4F-5B-77-B5-2A-E8-18-F4-41-C0-49-70-9C-7B-E3-2E-D1-39-30-CF-FA-41-79-23-17-60-26-B6-76-D5-1B-8D-00-F2-BB-AC-9E-44-E4-E1-1B-72-04-72-3B-7C-69-A5-69-E3-32-CC-E3-FD-DE-96-6C-3A-BC-A5-F3-7C-65-AC-8A-61-1F-32-39-F3-0F-B6";
            var publicKeyHex = "34-06-33-12-E0-71-56-AD-17-43-39-1C-82-86-23-2F-0F-F3-BE-22-05-D8-E7-BC-BC-0F-E3-4D-60-75-E3-AF-28-80-45-0C-F8-89-F5-A3-B5-BB-E5-1F-FE-38-6A-84-6E-98-FE-0A-F6-FF-06-2A-B2-BC-51-F9-A3-0F-8E-29-76-F1-D1-C3-E4-E7-29-74-6D-6E-1B-6A-E1-F0-F2-08-25-17-E0-F6-AE-29-5A-BC-32-33-C1-F3-7F-28-6C-60-A3-9D-2D-61-C0-74-44-44-72-38-DF-C8-93-7F-3B-16-ED-E4-E0-C4-C6-38-43-CA-8C-83-4E-5E-11-85-7A-CB-76-0D-C5-5B-44-50-56-04-A5-9B-3A-81-8E-D0-7F-99-16-3C-2A-CC-84-1B-98-FC-6A-AF-80-AE-6F-54-8C-FF-3E-01-DD-BA-9F-D8-7F-67-F5-6F-5A-46-01-56-B3-BA-EF-FE-32-70-C4-93-6F-09-46-A4-BF-94-AC-D0-F5-ED-77-89-47-CD-16-C3-47-A5-87-37-40-EF-23-B0-F9-F7-62-74-CC-3B-58-6E-D5-20-E8-B6-2C-D5-6D-93-9B-13-31-51-35-5F-7C-9D-D1-24-73-8C-C0-40-98-92-B5-D2-61-FC-5D-3F-AF-96-CA-0D-CF-88-D9-72-CB-50-19-B2-FE-14-C2-21-48-97-95-08-C6-03-44-42-FB-3D-BC-41-36-CA-F5-A0-2A-85-1B-D2-B3-C3-CE-E7-81-85-F4-BE-9C-28-EC-AD-D2-D4-26-78-3A-D7-33-5B-28-27-B3-0D-E5-AA-49-2F-72-2F-27-5D-02-D8-28-CC-D7-38-95-DF-03-DF-24-33-0D-71-3D-44-72-0E-0C-47-6F-00-5F-F8-82-6C-B8-C1-5F-F7-B5-A7-98-99-98-3B-2C-C7-76-4B-B3-48-08-83-F2-10-D1-4C-22-A7-7B-E9-D4-50-3D-7E-C3-7F-1F-1E-EE-F5-3C-F7-08-74-51-73-89-2A-3C-C5-A5-AE-45-32-F6-B9-AD-1D-6A-B2-BB-36-46-DB-A8-B3-2C-AC-DB-78-69-F9-02-08-8D-CF-EF-1E-8D-62-19-48-6B-4A-A1-06-AF-8C-53-99-D3-15-CA-67-57-71-D4-28-4A-87-7E-8B-2F-13-3B-B7-9B-85-19-EB-99-52-23-92-21-09-87-7F-22-C6-C9-F3-61-9E-81-BF-7B-F2-81-54-3C-F4-66-40-48-18-CF-1C-58-2B-22-B1-E0-8D-60-22-89-83-E4-CC-2A-61-BF-48-8B-CC-E2-C3-ED-58-F2-92-5A-74-DE-AB-33-55-68-31-5B-84-04-61-6E-59-53-F3";
            var privKey = HexFunctions.ToBytes(privKeyHex);
            var peerKey = HexFunctions.ToBytes(peerKeyHex);
            var publicKey = HexFunctions.ToBytes(publicKeyHex);
            var secret = HexFunctions.ToBytes(secretHex);
            await CheckSecret(NamedGroup.ffdhe4096, privKey, peerKey, publicKey, secret);
        }

        private static async Task CheckSecret(NamedGroup group, byte[] privKey, byte[] peerKey, byte[] publicKey, byte[] secret)
        {
            using (var factory = new PipeFactory())
            {
                var pipe = factory.Create();
                var write = pipe.Writer.Alloc();
                write.Write(peerKey);
                await write.FlushAsync();
                var reader = await pipe.Reader.ReadAsync();
                var instance = new OpenSsl11.OpenSslFiniteFieldKeyExchange(group);
                instance.GenerateKeys(privKey, publicKey);
                instance.SetPeerKey(new Internal.BigEndianAdvancingSpan(reader.Buffer.ToSpan()));
                var buffer = new byte[instance.KeyExchangeSize];
                var size = instance.DeriveSecret(buffer);
                var derived = buffer.Slice(0, size);
                Assert.Equal<byte>(secret, derived.ToArray());
            }
        }
    }
}
